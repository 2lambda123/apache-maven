pipeline {
  agent { node { label 'ubuntu' } }
  options {
    durabilityHint('PERFORMANCE_OPTIMIZED')
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
    timeout(time: 180, unit: 'MINUTES')
  }
  stages {
    stage("Build Maven Core") {
      steps {
        withEnv(["JAVA_HOME=${ tool "JDK 1.8 (latest)" }", "PATH+MAVEN=${tool 'Maven 3.6.3'}/bin:${env.JAVA_HOME}/bin"]) {
            sh "mvn -V clean install -P versionlessMavenDist -Dmaven.repo.local=${env.WORKSPACE}/repo"
          }
        }
//        stash name: 'apache-maven-bin.zip', includes: 'apache-maven/target/apache-maven-bin.zip'
//        stash name: 'wrapperDistroDir', includes: 'apache-maven/target/**'
//        stash name: 'mavenWrapper', includes: 'maven-wrapper/target/maven-wrapper.jar'
      }
    }
    stage( "Run Maven Integration Testing" ) {
      steps {
        git url: "https://github.com/apache/maven-integration-testing.git", branch: "master"
//        unstash name: 'apache-maven-bin.zip'
//        unstash name: 'wrapperDistroDir'
//        unstash name: 'mavenWrapper'
        sh "ls -lrt"
        withEnv(["JAVA_HOME=${ tool "JDK 1.8 (latest)" }", "PATH+MAVEN=${tool 'Maven 3.6.3'}/bin:${env.JAVA_HOME}/bin"]) {
          sh "mvn clean test -Prun-its,embedded -Dmaven.test.failure.ignore=true -Dmaven.repo.local=${env.WORKSPACE}/repo  -DmavenDistro=${env.WORKSPACE}/apache-maven/target/apache-maven-bin.zip -DwrapperDistroDir=${env.WORKSPACE}/apache-maven/target -DmavenWrapper=${env.WORKSPACE}/maven-wrapper/target/maven-wrapper.jar"
        }
      }
    }
  }
  post {
    always {
      junit 'core-it-suite/target/surefire-reports/*.xml'
      cleanWs()
    }
  }
}
