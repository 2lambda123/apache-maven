pipeline {
  agent { node { label 'ubuntu' } }
  options {
    durabilityHint('PERFORMANCE_OPTIMIZED')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
    timeout(time: 180, unit: 'MINUTES')
  }
  parameters {
    string( defaultValue: 'master', description: 'Core Its branch (default master)',
            name: 'ITS_BRANCH' )
  }
  stages {
    stage("Build Maven Core") {
      steps {
        withEnv(["JAVA_HOME=${ tool "JDK 1.8 (latest)" }", "PATH+MAVEN=${tool 'Maven 3.6.3'}/bin:${env.JAVA_HOME}/bin"]) {
            sh "mvn -Drat.skip=true -T2 -B -V install -P versionlessMavenDist -Dmaven.repo.local=${env.WORKSPACE}/repo"
        }
      }
//        stash name: 'apache-maven-bin.zip', includes: 'apache-maven/target/apache-maven-bin.zip'
//        stash name: 'wrapperDistroDir', includes: 'apache-maven/target/**'
//        stash name: 'mavenWrapper', includes: 'maven-wrapper/target/maven-wrapper.jar'
    }
    stage( "Run Maven Integration Testing" ) {
      steps {
        git url: "https://github.com/apache/maven-integration-testing.git", branch: "${ITS_BRANCH}"
//        unstash name: 'apache-maven-bin.zip'
//        unstash name: 'wrapperDistroDir'
//        unstash name: 'mavenWrapper'
        sh "ls -lrt ${env.WORKSPACE}/apache-maven/target/"
        withEnv(["JAVA_HOME=${ tool "JDK 1.8 (latest)" }", "PATH+MAVEN=${tool 'Maven 3.6.3'}/bin:${env.JAVA_HOME}/bin"]) {
          //embedded fastest
          sh "mvn clean install -V -B -Prun-its -Dmaven.test.failure.ignore=true -Dmaven.repo.local=${env.WORKSPACE}/repo  -DmavenDistro=${env.WORKSPACE}/apache-maven/target/apache-maven-bin.zip -DwrapperDistroDir=${env.WORKSPACE}/apache-maven/target -DmavenWrapper=${env.WORKSPACE}/maven-wrapper/target/maven-wrapper.jar"
        }
      }
    }
  }
  post {
    always {
      junit testResults: 'core-it-suite/target/surefire-reports/*.xml', allowEmptyResults: true
      cleanWs()
    }
  }
}
